# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: main-ci-cd

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    ref: refs/heads/master
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: |
       ./gradlew build
       tree
    # 通过 Dockerfile 构建镜像
    - name: Build docker image
      run: docker build . -t javademo:v1
    # 登陆到我的 docker registry
    - name: Login tencent docker image registry
      run: |
        echo ${{ secrets.REGISTRY_USERNAME }}
        echo ${{ secrets.REGISTRY_PASSWORD }}
        echo "${{ secrets.REGISTRY_PASSWORD }}" |  docker login --username=${{ secrets.REGISTRY_USERNAME }}  http://ccr.ccs.tencentyun.com  --password-stdin
    # 上传docker镜像
    - name: Push image to my tencent docker image registry
      run: |
        docker image ls 
        docker tag  javademo:v1 ccr.ccs.tencentyun.com/javademo_namespace/javademo:v1
        docker image ls 
        docker push ccr.ccs.tencentyun.com/javademo_namespace/javademo:v1

  # A workflow run is made up of one or more jobs that can run sequentially or in parallel

  # This workflow contains a single job called "build"
  pull-docker:
    needs: [build]
    name: Pull Docker
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: ${{ secrets.HOST_PORT }}
          script: |
            docker stop $(docker ps --filter ancestor=${{ secrets.DOCKER_REPOSITORY }} -q)
            docker rm -f $(docker ps -a --filter ancestor=${{ secrets.DOCKER_REPOSITORY }}:v1 -q)
            docker rmi -f $(docker images ${{ secrets.DOCKER_REPOSITORY }}:v1 -q)
            docker login --username=${{ secrets.REGISTRY_USERNAME }} --password ${{ secrets.REGISTRY_PASSWORD }} http://ccr.ccs.tencentyun.com
            docker pull ${{ secrets.DOCKER_REPOSITORY }}:v1
            docker run -d -p 8000:8080 ${{ secrets.DOCKER_REPOSITORY }}:v1

